1-	| KEYWORD : PROGRAM  | IDF : Nom 
2-	    | KEYWORD : var  | IDF : X  | SEPRATOR : :  | TYPE : INT  | EOI : £ 
3-	    | KEYWORD : var  | IDF : Z  | SEPRATOR : ||  | IDF : Y  | SEPRATOR : :  | TYPE : FLOAT  | EOI : £ 
4-	    | KEYWORD : var  | IDF : L  | SEPRATOR : ||  | IDF : K  | SIZE : [20]  | SEPRATOR : :  | ATYPE : [INT]  | EOI : £ 
5-	    | KEYWORD : Let  | IDF : D  | SEPRATOR : :  | TYPE : INT  | AFFECT : =  | INTEGER : 5  | EOI : £ 
6-	| KEYWORD : BEGIN 
7-	    | A Comment : //ferfge
8-	    regre
9-	    gerrg//
10-	    | IDF : Z | SIZE : [5] | AFFECT : = | IDF : X  | EOI : £ 
11-	    | IDF : Z | SEPRATOR : [ | IDF : X | SEPRATOR : ] | AFFECT : = | IDF : D | EOI : £ 
12-	    | IDF : Z | SEPRATOR : [ | IDF : X | ARTH_OP : + | IDF : Y | SEPRATOR : ] | EOI : £ 
13-	    | IDF : X  | AFFECT : =  | SEPRATOR : ( | INTEGER : 5 | SEPRATOR : )  | EOI : £ 
14-	    | IDF : X  | AFFECT : =  | SEPRATOR : ( | INTEGER : 5 | SEPRATOR : )  | ARTH_OP : /  | INTEGER : 0  | EOI : £ 
15-	    | IDF : Z | EOI : £ 
16-	    | IDF : L  | AFFECT : =  | INTEGER : 5  | ARTH_OP : +  | IDF : Z  | ARTH_OP : -  | IDF : L  | ARTH_OP : *  | SEPRATOR : ( | IDF : Z  | ARTH_OP : /  | IDF : X | SEPRATOR : ) | ARTH_OP : + 
17-	    | IDF : Z  | ARTH_OP : -  | IDF : D  | EOI : £ 
18-	    | IDF : Z  | ARTH_OP : -  | FLOAT : (-200.5)  | ARTH_OP : +  | SEPRATOR : ( | IDF : D  | AFFECT : =  | INTEGER : 5 | SEPRATOR : )  | EOI : £ 
19-	    | IDF : D  | AFFECT : =  | STRING : «FEFPK» | EOI : £ 
20-	    | IDF : D  | AFFECT : =  | CHAR : 'f' | EOI : £ 
21-	    | KEYWORD : FOR  | SEPRATOR : ( | IDF : X  | SEPRATOR : :  | INTEGER : 1  | SEPRATOR : :  | IDF : X | LOGIC_OP : == | INTEGER : 100 | SEPRATOR : ) 
22-	        | IDF : Z | AFFECT : =  | IDF : D | ARTH_OP : + | IDF : Z | EOI : £ 
23-	    | KEYWORD : END_FOR 
24-	    | KEYWORD : IF | SEPRATOR : ( | IDF : D | LOGIC_OP : << | IDF : Z | SEPRATOR : ) | SEPRATOR : : | SEPRATOR : { 
25-	        | KEYWORD : IF | SEPRATOR : ( | IDF : D | LOGIC_OP : << | IDF : Z | SEPRATOR : ) | SEPRATOR : : | SEPRATOR : { 
26-	            | IDF : X  | AFFECT : =  | INTEGER : 5  | ARTH_OP : +  | INTEGER : 8  | EOI : £ 
27-	            | KEYWORD : RETURN  | SEPRATOR : ( | IDF : D | SEPRATOR : ) 
28-	        | SEPRATOR : } 
29-	        | KEYWORD : ELSE  | SEPRATOR : : | SEPRATOR : { 
30-	            | IDF : X  | AFFECT : =  | INTEGER : 5  | ARTH_OP : +  | INTEGER : 4  | EOI : £ 
31-	            | KEYWORD : RETURN  | SEPRATOR : ( | IDF : Z | SEPRATOR : ) 
32-	        | SEPRATOR : } 
33-	        | KEYWORD : END_IF 
34-	        | KEYWORD : RETURN  | SEPRATOR : ( | IDF : D | SEPRATOR : ) 
35-	    | SEPRATOR : } 
36-	    | KEYWORD : ELSE  | SEPRATOR : : | SEPRATOR : { 
37-	        | IDF : X  | AFFECT : =  | INTEGER : 5  | ARTH_OP : +  | INTEGER : 4  | EOI : £ 
38-	        | KEYWORD : RETURN  | SEPRATOR : ( | IDF : Z | SEPRATOR : ) 
39-	    | SEPRATOR : } 
40-	    | KEYWORD : END_IF 
41-	    | KEYWORD : GET | SEPRATOR : ( | STRING : «FEFPK»  | SEPRATOR : :  | SPECIAL : @  | IDF : D | SEPRATOR : ) | EOI : £ 
42-	    | KEYWORD : SHOW | SEPRATOR : ( | STRING : «FEFPK»  | SEPRATOR : :  | IDF : D | SEPRATOR : ) | EOI : £ 
43-	| KEYWORD : END 
------------------ IDF Table ------------------
Entity: D  -  Type: (null)  -  Value: 0.000000
Entity: K  -  Type: (null)  -  Value: 0.000000
Entity: L  -  Type: (null)  -  Value: 0.000000
Entity: Y  -  Type: (null)  -  Value: 0.000000
Entity: Z  -  Type: (null)  -  Value: 0.000000
Entity: X  -  Type: (null)  -  Value: 0.000000
Entity: Nom  -  Type: (null)  -  Value: 0.000000

------------------ Comments Table ------------------
//ferfge	    regre	    gerrg// 
------------------ Infixe Table ------------------
PROGRAM Nom var X : INT £ var Z || Y : FLOAT £ var L || K [20] : [INT] £ Let D : INT = 5 £ BEGIN Z [5] = X £ Z [ X ] = D £ Z [ X + Y ] £ X = ( 5 ) £ X = ( 5 ) / 0 £ Z £ L = 5 + Z - L * ( Z / X ) + Z - D £ Z - (-200.5) + ( D = 5 ) £ D = «FEFPK» £ D = 'f' £ FOR ( X : 1 : X == 100 ) Z = D + Z £ END_FOR IF ( D << Z ) : { IF ( D << Z ) : { X = 5 + 8 £ RETURN ( D ) } ELSE : { X = 5 + 4 £ RETURN ( Z ) } END_IF RETURN ( D ) } ELSE : { X = 5 + 4 £ RETURN ( Z ) } END_IF GET ( «FEFPK» : @ D ) £ SHOW ( «FEFPK» : D ) £ END 