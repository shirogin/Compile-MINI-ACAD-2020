%{
    #include <stdio.h>
    #include <string.h>
    int yylex();
    int yyerror(char *msg); 
    FILE *yyin;
    extern char *yytext;
    extern int yylineo;
    extern int Col;
%}

%token PROGRAM IDF SIZE BEGI END var Let AFFECT EOI ATYPE ADDRESS
%token IDFS OPENSEP TWOP CLOSESEP OPENBRACK CLOSEBRACK
%token INT FLOATT CHART STRINGT
%token INTEGER FLOAT CHAR STRING
%token GET SHOW IF FOR RETURN ELSE END_IF END_FOR
%token ARTH_OP
%token LOGIC_OP
%start prog


%%
prog: PROGRAM IDF DECLARATION BEGI INSTRACTION END{printf(" no Syntax error");};
DECLARATION: | var IDF IDFList TypeDECLARATION EOI DECLARATION
    | Let IDF TWOP INT AFFECT INTEGER EOI DECLARATION
    ;
TypeDECLARATION: SIZE TWOP ATYPE
    | TWOP TYPE;
TYPE: INT
    | FLOATT
    | CHART
    | STRINGT
    ;
IDFList:  | IDFS IDF IDFList;
ELSECASE: | ELSE CONDITIONHOLDER
CONDITIONHOLDER: TWOP OPENBRACK INSTRACTION CLOSEBRACK;
INSTRACTION: | AEXPRESSION EOI INSTRACTION
    | IF OPENSEP CONDITION CLOSESEP CONDITIONHOLDER ELSECASE END_IF INSTRACTION
    | FOR OPENSEP IDF TWOP VALUE TWOP CONDITION CLOSESEP INSTRACTION END_FOR INSTRACTION
    | SHOW OPENSEP STRING TWOP IDF CLOSESEP EOI INSTRACTION
    | GET OPENSEP STRING TWOP ADDRESS IDF CLOSESEP EOI INSTRACTION
    ;
CONDITION: EXPRESSION LOGIC_OP EXPRESSION;
EXPRESSION: IDF 
    | VALUE
    | EXPRESSION ARTH_OP EXPRESSION
    | OPENSEP AEXPRESSION CLOSESEP
    ;
AEXPRESSION: EXPRESSION
    | IDF AFFECT EXPRESSION
    ;
VALUE: INTEGER 
    | FLOAT
    | CHAR
    | STRING
    ;

%%

int yyerror(char *s){
    printf(" Syntax Error on line %s\n", s);
    return 0;
}

int main(int argc, char *argv[]){
    yyin = fopen(argv[1], "r");
    if (yyin == NULL)
        printf("File doesn't exist");
    else yyparse();
    printf("\n");;
    return 0;
}

int yywrap()
{}